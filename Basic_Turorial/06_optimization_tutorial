{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"5Su4N4vLmT26","executionInfo":{"status":"ok","timestamp":1717310908728,"user_tz":-540,"elapsed":9,"user":{"displayName":"JIAE LEE","userId":"15036917826296964818"}}},"outputs":[],"source":["# Google Colab에서 노트북을 실행하실 때에는\n","# https://tutorials.pytorch.kr/beginner/colab 를 참고하세요.\n","%matplotlib inline"]},{"cell_type":"markdown","metadata":{"id":"hMW89tX6mT2-"},"source":[" 모델 매개변수 최적화하기\n","\n","이제 모델과 데이터가 준비되었으니, 데이터에 매개변수를 최적화하여 모델을 학습하고, 검증하고, 테스트할 차례입니다.\n","모델을 학습하는 과정은 반복적인 과정을 거칩니다; 각 반복 단계에서 모델은 출력을 추측하고,\n","추측과 정답 사이의 오류(*손실(loss)* )를 계산하고, ([이전 장](autograd_tutorial.html) 에서 본 것처럼)\n","매개변수에 대한 오류의 도함수(derivative)를 수집한 뒤, 경사하강법을 사용하여 이 파라미터들을 **최적화(optimize)** 합니다.\n","이 과정에 대한 자세한 설명은 [3Blue1Brown의 역전파](https://www.youtube.com/watch?v=tIeHLnjs5U8)_ 영상을 참고하세요.\n","\n","## 기본(Pre-requisite) 코드\n","이전 장인 [Dataset과 DataLoader](data_tutorial.html) 와 [신경망 모델 구성하기](buildmodel_tutorial.html) 에서\n","코드를 가져왔습니다.\n"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"5pbttwM4mT3B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1717310925014,"user_tz":-540,"elapsed":16294,"user":{"displayName":"JIAE LEE","userId":"15036917826296964818"}},"outputId":"2414f6f5-0b2a-4096-cf2e-1f957812ec55"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 26421880/26421880 [00:02<00:00, 10483324.84it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 29515/29515 [00:00<00:00, 204465.53it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 4422102/4422102 [00:01<00:00, 3734820.98it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 5148/5148 [00:00<00:00, 11640041.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw\n","\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["import torch\n","from torch import nn\n","from torch.utils.data import DataLoader\n","from torchvision import datasets\n","from torchvision.transforms import ToTensor\n","\n","training_data = datasets.FashionMNIST(\n","    root=\"data\",\n","    train=True,\n","    download=True,\n","    transform=ToTensor()\n",")\n","\n","test_data = datasets.FashionMNIST(\n","    root=\"data\",\n","    train=False,\n","    download=True,\n","    transform=ToTensor()\n",")\n","\n","train_dataloader = DataLoader(training_data, batch_size=64)\n","test_dataloader = DataLoader(test_data, batch_size=64)\n","\n","class NeuralNetwork(nn.Module):\n","    def __init__(self):\n","        super(NeuralNetwork, self).__init__()\n","        self.flatten = nn.Flatten()\n","        self.linear_relu_stack = nn.Sequential(\n","            nn.Linear(28*28, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 10),\n","        )\n","\n","    def forward(self, x):\n","        x = self.flatten(x)\n","        logits = self.linear_relu_stack(x)\n","        return logits\n","\n","model = NeuralNetwork()"]},{"cell_type":"markdown","metadata":{"id":"rKzStaWDmT3C"},"source":["## 하이퍼파라미터(Hyperparameter)\n","\n","하이퍼파라미터(Hyperparameter)는 모델 최적화 과정을 제어할 수 있는 조절 가능한 매개변수입니다.\n","서로 다른 하이퍼파라미터 값은 모델 학습과 수렴율(convergence rate)에 영향을 미칠 수 있습니다.\n","(하이퍼파라미터 튜닝(tuning)에 대해 [더 알아보기](https://tutorials.pytorch.kr/beginner/hyperparameter_tuning_tutorial.html)_)\n","\n","학습 시에는 다음과 같은 하이퍼파라미터를 정의합니다:\n"," - **에폭(epoch) 수** - 데이터셋을 반복하는 횟수\n"," - **배치 크기(batch size)** - 매개변수가 갱신되기 전 신경망을 통해 전파된 데이터 샘플의 수\n"," - **학습률(learning rate)** - 각 배치/에폭에서 모델의 매개변수를 조절하는 비율. 값이 작을수록 학습 속도가 느려지고, 값이 크면 학습 중 예측할 수 없는 동작이 발생할 수 있습니다.\n","\n","\n"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"csZ_VZTHmT3D","executionInfo":{"status":"ok","timestamp":1717310925015,"user_tz":-540,"elapsed":25,"user":{"displayName":"JIAE LEE","userId":"15036917826296964818"}}},"outputs":[],"source":["learning_rate = 1e-3\n","batch_size = 64\n","epochs = 5"]},{"cell_type":"markdown","metadata":{"id":"D3okBHCfmT3D"},"source":["## 최적화 단계(Optimization Loop)\n","\n","하이퍼파라미터를 설정한 뒤에는 최적화 단계를 통해 모델을 학습하고 최적화할 수 있습니다.\n","최적화 단계의 각 반복(iteration)을 **에폭**\\ 이라고 부릅니다.\n","\n","하나의 에폭은 다음 두 부분으로 구성됩니다:\n"," - **학습 단계(train loop)** - 학습용 데이터셋을 반복(iterate)하고 최적의 매개변수로 수렴합니다.\n"," - **검증/테스트 단계(validation/test loop)** - 모델 성능이 개선되고 있는지를 확인하기 위해 테스트 데이터셋을 반복(iterate)합니다.\n","\n","학습 단계(training loop)에서 일어나는 몇 가지 개념들을 간략히 살펴보겠습니다. 최적화 단계(optimization loop)를 보려면\n","`full-impl-label` 부분으로 건너뛰시면 됩니다.\n","\n","### 손실 함수(loss function)\n","\n","학습용 데이터를 제공하면, 학습되지 않은 신경망은 정답을 제공하지 않을 확률이 높습니다. **손실 함수(loss function)** 는\n","획득한 결과와 실제 값 사이의 틀린 정도(degree of dissimilarity)를 측정하며, 학습 중에 이 값을 최소화하려고 합니다.\n","주어진 데이터 샘플을 입력으로 계산한 예측과 정답(label)을 비교하여 손실(loss)을 계산합니다.\n","\n","일반적인 손실함수에는 회귀 문제(regression task)에 사용하는 [nn.MSELoss](https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html#torch.nn.MSELoss) (평균 제곱 오차(MSE; Mean Square Error))나\n","분류(classification)에 사용하는 [nn.NLLLoss](https://pytorch.org/docs/stable/generated/torch.nn.NLLLoss.html#torch.nn.NLLLoss) (음의 로그 우도(Negative Log Likelihood)),\n","그리고 ``nn.LogSoftmax`` 와 ``nn.NLLLoss`` 를 합친 [nn.CrossEntropyLoss](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss)\n","등이 있습니다.\n","\n","모델의 출력 로짓(logit)을 ``nn.CrossEntropyLoss`` 에 전달하여 로짓(logit)을 정규화하고 예측 오류를 계산합니다.\n","\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"gmpgfZn_mT3E","executionInfo":{"status":"ok","timestamp":1717310925015,"user_tz":-540,"elapsed":22,"user":{"displayName":"JIAE LEE","userId":"15036917826296964818"}}},"outputs":[],"source":["# 손실 함수를 초기화합니다.\n","loss_fn = nn.CrossEntropyLoss()"]},{"cell_type":"markdown","metadata":{"id":"paFWfhp-mT3E"},"source":["### 옵티마이저(Optimizer)\n","\n","최적화는 각 학습 단계에서 모델의 오류를 줄이기 위해 모델 매개변수를 조정하는 과정입니다. **최적화 알고리즘** 은 이 과정이 수행되는 방식(여기에서는 확률적 경사하강법(SGD; Stochastic Gradient Descent))을 정의합니다.\n","모든 최적화 절차(logic)는 ``optimizer`` 객체에 캡슐화(encapsulate)됩니다. 여기서는 SGD 옵티마이저를 사용하고 있으며, PyTorch에는 ADAM이나 RMSProp과 같은 다른 종류의 모델과 데이터에서 더 잘 동작하는\n","[다양한 옵티마이저](https://pytorch.org/docs/stable/optim.html) 가 있습니다.\n","\n","학습하려는 모델의 매개변수와 학습률(learning rate) 하이퍼파라미터를 등록하여 옵티마이저를 초기화합니다.\n","\n"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"HG3Pm33pmT3E","executionInfo":{"status":"ok","timestamp":1717310925015,"user_tz":-540,"elapsed":21,"user":{"displayName":"JIAE LEE","userId":"15036917826296964818"}}},"outputs":[],"source":["optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)"]},{"cell_type":"markdown","metadata":{"id":"TOEsjKhLmT3F"},"source":["학습 단계(loop)에서 최적화는 세단계로 이뤄집니다:\n"," * ``optimizer.zero_grad()``를 호출하여 모델 매개변수의 변화도를 재설정합니다. 기본적으로 변화도는 더해지기(add up) 때문에 중복 계산을 막기 위해 반복할 때마다 명시적으로 0으로 설정합니다.\n"," * ``loss.backwards()``를 호출하여 예측 손실(prediction loss)을 역전파합니다. PyTorch는 각 매개변수에 대한 손실의 변화도를 저장합니다.\n"," * 변화도를 계산한 뒤에는 ``optimizer.step()``을 호출하여 역전파 단계에서 수집된 변화도로 매개변수를 조정합니다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"v1P_GrlXmT3G"},"source":["\n","## 전체 구현\n","\n","최적화 코드를 반복하여 수행하는 ``train_loop``와 테스트 데이터로 모델의 성능을 측정하는 ``test_loop``를 정의하였습니다.\n","\n"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"9gIiMOlTmT3G","executionInfo":{"status":"ok","timestamp":1717310925015,"user_tz":-540,"elapsed":20,"user":{"displayName":"JIAE LEE","userId":"15036917826296964818"}}},"outputs":[],"source":["def train_loop(dataloader, model, loss_fn, optimizer):\n","    size = len(dataloader.dataset)\n","    for batch, (X, y) in enumerate(dataloader):\n","        # 예측(prediction)과 손실(loss) 계산\n","        pred = model(X)\n","        loss = loss_fn(pred, y)\n","\n","        # 역전파\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        if batch % 100 == 0:\n","            loss, current = loss.item(), (batch + 1) * len(X)\n","            print(f\"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]\")\n","\n","\n","def test_loop(dataloader, model, loss_fn):\n","    size = len(dataloader.dataset)\n","    num_batches = len(dataloader)\n","    test_loss, correct = 0, 0\n","\n","    with torch.no_grad():\n","        for X, y in dataloader:\n","            pred = model(X)\n","            test_loss += loss_fn(pred, y).item()\n","            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n","\n","    test_loss /= num_batches\n","    correct /= size\n","    print(f\"Test Error: \\n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \\n\")"]},{"cell_type":"markdown","metadata":{"id":"smSyU7eGmT3G"},"source":["손실 함수와 옵티마이저를 초기화하고 ``train_loop``와 ``test_loop``에 전달합니다.\n","모델의 성능 향상을 알아보기 위해 자유롭게 에폭(epoch) 수를 증가시켜 볼 수 있습니다.\n","\n"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"nbFTkCzCmT3H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1717311036707,"user_tz":-540,"elapsed":111712,"user":{"displayName":"JIAE LEE","userId":"15036917826296964818"}},"outputId":"e1c6e1e9-6d99-4438-fb6a-8fc94f463f8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1\n","-------------------------------\n","loss: 2.307074  [   64/60000]\n","loss: 2.290596  [ 6464/60000]\n","loss: 2.277634  [12864/60000]\n","loss: 2.263257  [19264/60000]\n","loss: 2.258137  [25664/60000]\n","loss: 2.231693  [32064/60000]\n","loss: 2.239399  [38464/60000]\n","loss: 2.213792  [44864/60000]\n","loss: 2.206468  [51264/60000]\n","loss: 2.174494  [57664/60000]\n","Test Error: \n"," Accuracy: 41.0%, Avg loss: 2.168097 \n","\n","Epoch 2\n","-------------------------------\n","loss: 2.178861  [   64/60000]\n","loss: 2.173156  [ 6464/60000]\n","loss: 2.120189  [12864/60000]\n","loss: 2.126461  [19264/60000]\n","loss: 2.089711  [25664/60000]\n","loss: 2.035820  [32064/60000]\n","loss: 2.065005  [38464/60000]\n","loss: 1.992769  [44864/60000]\n","loss: 1.990389  [51264/60000]\n","loss: 1.930273  [57664/60000]\n","Test Error: \n"," Accuracy: 54.7%, Avg loss: 1.920159 \n","\n","Epoch 3\n","-------------------------------\n","loss: 1.946909  [   64/60000]\n","loss: 1.932413  [ 6464/60000]\n","loss: 1.813304  [12864/60000]\n","loss: 1.843301  [19264/60000]\n","loss: 1.752855  [25664/60000]\n","loss: 1.697969  [32064/60000]\n","loss: 1.722009  [38464/60000]\n","loss: 1.618358  [44864/60000]\n","loss: 1.633277  [51264/60000]\n","loss: 1.540263  [57664/60000]\n","Test Error: \n"," Accuracy: 59.9%, Avg loss: 1.545784 \n","\n","Epoch 4\n","-------------------------------\n","loss: 1.603411  [   64/60000]\n","loss: 1.580007  [ 6464/60000]\n","loss: 1.422143  [12864/60000]\n","loss: 1.493015  [19264/60000]\n","loss: 1.377223  [25664/60000]\n","loss: 1.362553  [32064/60000]\n","loss: 1.380797  [38464/60000]\n","loss: 1.301802  [44864/60000]\n","loss: 1.332444  [51264/60000]\n","loss: 1.238248  [57664/60000]\n","Test Error: \n"," Accuracy: 63.4%, Avg loss: 1.260898 \n","\n","Epoch 5\n","-------------------------------\n","loss: 1.331596  [   64/60000]\n","loss: 1.321344  [ 6464/60000]\n","loss: 1.152758  [12864/60000]\n","loss: 1.258049  [19264/60000]\n","loss: 1.133973  [25664/60000]\n","loss: 1.151669  [32064/60000]\n","loss: 1.173179  [38464/60000]\n","loss: 1.112897  [44864/60000]\n","loss: 1.148529  [51264/60000]\n","loss: 1.069810  [57664/60000]\n","Test Error: \n"," Accuracy: 64.5%, Avg loss: 1.088704 \n","\n","Epoch 6\n","-------------------------------\n","loss: 1.156176  [   64/60000]\n","loss: 1.163637  [ 6464/60000]\n","loss: 0.979984  [12864/60000]\n","loss: 1.114351  [19264/60000]\n","loss: 0.987593  [25664/60000]\n","loss: 1.015035  [32064/60000]\n","loss: 1.049545  [38464/60000]\n","loss: 0.996585  [44864/60000]\n","loss: 1.031799  [51264/60000]\n","loss: 0.968595  [57664/60000]\n","Test Error: \n"," Accuracy: 65.7%, Avg loss: 0.980351 \n","\n","Epoch 7\n","-------------------------------\n","loss: 1.037377  [   64/60000]\n","loss: 1.063675  [ 6464/60000]\n","loss: 0.864335  [12864/60000]\n","loss: 1.020724  [19264/60000]\n","loss: 0.897161  [25664/60000]\n","loss: 0.920834  [32064/60000]\n","loss: 0.969939  [38464/60000]\n","loss: 0.922202  [44864/60000]\n","loss: 0.952209  [51264/60000]\n","loss: 0.901736  [57664/60000]\n","Test Error: \n"," Accuracy: 67.2%, Avg loss: 0.907593 \n","\n","Epoch 8\n","-------------------------------\n","loss: 0.951276  [   64/60000]\n","loss: 0.994897  [ 6464/60000]\n","loss: 0.782430  [12864/60000]\n","loss: 0.955485  [19264/60000]\n","loss: 0.837223  [25664/60000]\n","loss: 0.853292  [32064/60000]\n","loss: 0.914413  [38464/60000]\n","loss: 0.872760  [44864/60000]\n","loss: 0.895334  [51264/60000]\n","loss: 0.853848  [57664/60000]\n","Test Error: \n"," Accuracy: 68.3%, Avg loss: 0.855563 \n","\n","Epoch 9\n","-------------------------------\n","loss: 0.885497  [   64/60000]\n","loss: 0.943770  [ 6464/60000]\n","loss: 0.721585  [12864/60000]\n","loss: 0.907337  [19264/60000]\n","loss: 0.794433  [25664/60000]\n","loss: 0.802885  [32064/60000]\n","loss: 0.872509  [38464/60000]\n","loss: 0.838037  [44864/60000]\n","loss: 0.852729  [51264/60000]\n","loss: 0.817056  [57664/60000]\n","Test Error: \n"," Accuracy: 69.7%, Avg loss: 0.816147 \n","\n","Epoch 10\n","-------------------------------\n","loss: 0.832819  [   64/60000]\n","loss: 0.902972  [ 6464/60000]\n","loss: 0.674028  [12864/60000]\n","loss: 0.870179  [19264/60000]\n","loss: 0.761965  [25664/60000]\n","loss: 0.763946  [32064/60000]\n","loss: 0.838947  [38464/60000]\n","loss: 0.812090  [44864/60000]\n","loss: 0.819595  [51264/60000]\n","loss: 0.787012  [57664/60000]\n","Test Error: \n"," Accuracy: 71.0%, Avg loss: 0.784735 \n","\n","Done!\n"]}],"source":["loss_fn = nn.CrossEntropyLoss()\n","optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)\n","\n","epochs = 10\n","for t in range(epochs):\n","    print(f\"Epoch {t+1}\\n-------------------------------\")\n","    train_loop(train_dataloader, model, loss_fn, optimizer)\n","    test_loop(test_dataloader, model, loss_fn)\n","print(\"Done!\")"]}],"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"colab":{"provenance":[{"file_id":"https://github.com/PyTorchKorea/tutorials-kr/blob/master/docs/_downloads/91d72708edab956d7293bb263e2ab53f/optimization_tutorial.ipynb","timestamp":1717309098032}],"gpuType":"T4"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}